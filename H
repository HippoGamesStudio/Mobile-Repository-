using UnityEngine;
using Mirror;
using System.Collections.Generic;

public class ClassicSnakeHead : NetworkBehaviour
{
    public GameObject bodySegmentPrefab;
    public float moveInterval = 0.2f; // шаг в секундах
    public float gridSize = 1f;

    private List<Transform> bodySegments = new List<Transform>();
    private List<Vector3> positions = new List<Vector3>();

    private float timer = 0f;
    private Vector3 direction = Vector3.forward;

    void Start()
    {
        if (isLocalPlayer)
        {
            positions.Add(transform.position);
        }
    }

    void Update()
    {
        if (!isLocalPlayer) return;

        // Управление
        if (Input.GetKeyDown(KeyCode.LeftArrow) || Input.GetKeyDown(KeyCode.A))
        {
            if (direction != Vector3.right) direction = Vector3.left;
        }
        else if (Input.GetKeyDown(KeyCode.RightArrow) || Input.GetKeyDown(KeyCode.D))
        {
            if (direction != Vector3.left) direction = Vector3.right;
        }
        else if (Input.GetKeyDown(KeyCode.UpArrow) || Input.GetKeyDown(KeyCode.W))
        {
            if (direction != Vector3.back) direction = Vector3.forward;
        }
        else if (Input.GetKeyDown(KeyCode.DownArrow) || Input.GetKeyDown(KeyCode.S))
        {
            if (direction != Vector3.forward) direction = Vector3.back;
        }

        // Движение по таймеру
        timer += Time.deltaTime;
        if (timer >= moveInterval)
        {
            timer = 0f;
            Move();
        }
    }

    void Move()
    {
        Vector3 newPosition = transform.position + direction * gridSize;

        transform.position = newPosition;
        positions.Insert(0, newPosition);

        // Движение тела
        for (int i = 0; i < bodySegments.Count; i++)
        {
            bodySegments[i].position = positions[Mathf.Clamp(i + 1, 0, positions.Count - 1)];
        }

        // Ограничиваем размер списка
        if (positions.Count > bodySegments.Count + 1)
        {
            positions.RemoveAt(positions.Count - 1);
        }
    }

    private void OnTriggerEnter(Collider other)
    {
        if (!isLocalPlayer) return;

        if (other.CompareTag("Food"))
        {
            CmdEatFood(other.gameObject);
        }
    }

    [Command]
    void CmdEatFood(GameObject food)
    {
        SnakeFood foodScript = food.GetComponent<SnakeFood>();
        if (foodScript != null)
        {
            foodScript.Respawn();
            CmdAddSegment();
        }
    }

    [Command]
    void CmdAddSegment()
    {
        GameObject segment = Instantiate(bodySegmentPrefab, transform.position, Quaternion.identity);
        NetworkServer.Spawn(segment);
        RpcAddSegment(segment);
    }

    [ClientRpc]
    void RpcAddSegment(GameObject segment)
    {
        bodySegments.Add(segment.transform);
    }
}




using UnityEngine;
using Mirror;

public class SnakeFood : NetworkBehaviour
{
    public Vector2 spawnAreaMin = new Vector2(-10, -10);
    public Vector2 spawnAreaMax = new Vector2(10, 10);

    public override void OnStartServer()
    {
        base.OnStartServer();
        Respawn(); // ТОЛЬКО НА СЕРВЕРЕ
    }

    [Server]
    public void Respawn()
    {
        float x = Mathf.Round(Random.Range(spawnAreaMin.x, spawnAreaMax.x));
        float z = Mathf.Round(Random.Range(spawnAreaMin.y, spawnAreaMax.y));
        transform.position = new Vector3(x, 0.5f, z);
    }
}
