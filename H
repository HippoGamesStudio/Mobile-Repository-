using UnityEngine;
using UnityEngine.Networking;
using System.Collections;

[System.Serializable]
public class Landmark { public float x, y, z; }
[System.Serializable]
public class HandData { public Landmark[][] hands; }

public class HandTracker : MonoBehaviour
{
    public string serverUrl = "https://your-server.onrender.com/process";
    WebCamTexture webcam;
    public Transform[] points; // присвоить 21 трансформ

    void Start()
    {
        webcam = new WebCamTexture();
        webcam.Play();
        StartCoroutine(SendLoop());
    }

    IEnumerator SendLoop()
    {
        while (true)
        {
            yield return new WaitForSeconds(0.2f);
            Texture2D tex = new Texture2D(webcam.width, webcam.height);
            tex.SetPixels(webcam.GetPixels());
            tex.Apply();

            byte[] jpg = tex.EncodeToJPG();
            UnityWebRequest www = UnityWebRequest.Put(serverUrl, jpg);
            www.method = "POST";
            www.SetRequestHeader("Content-Type", "image/jpeg");
            yield return www.SendWebRequest();

            if (www.result == UnityWebRequest.Result.Success)
                AnimateHands(www.downloadHandler.text);
        }
    }

    void AnimateHands(string json)
    {
        var data = JsonUtility.FromJson<HandData>(json);
        if (data.hands.Length == 0) return;
        var hand = data.hands[0];
        for (int i = 0; i < hand.Length && i < points.Length; i++)
        {
            var lm = hand[i];
            float x = (lm.x - .5f) * 2f;
            float y = (lm.y - .5f) * 2f;
            points[i].localPosition = new Vector3(x, y, -lm.z);
        }
    }
}
