using UnityEngine;
using Mirror;
using System.Collections.Generic;

public class SnakeHead : NetworkBehaviour
{
    public float moveSpeed = 2f;
    public float turnSpeed = 90f;
    public GameObject bodySegmentPrefab;
    public float segmentSpacing = 0.5f;

    private List<Transform> bodySegments = new List<Transform>();
    private List<Vector3> positions = new List<Vector3>();

    void Start()
    {
        if (isLocalPlayer)
        {
            positions.Add(transform.position);
        }
    }

    void Update()
    {
        if (!isLocalPlayer) return;

        float h = Input.GetAxisRaw("Horizontal");

        // поворот влево/вправо
        transform.Rotate(Vector3.up * h * turnSpeed * Time.deltaTime);

        // всегда двигается вперёд
        transform.Translate(Vector3.forward * moveSpeed * Time.deltaTime);

        // записываем позицию головы
        if (Vector3.Distance(transform.position, positions[positions.Count - 1]) > segmentSpacing)
        {
            positions.Add(transform.position);
        }

        // обновляем позиции сегментов
        for (int i = 0; i < bodySegments.Count; i++)
        {
            int index = Mathf.Clamp(positions.Count - 1 - (i + 1) * 5, 0, positions.Count - 1);
            bodySegments[i].position = positions[index];
        }
    }

    [Command]
    public void CmdAddSegment()
    {
        GameObject segment = Instantiate(bodySegmentPrefab, transform.position, Quaternion.identity);
        NetworkServer.Spawn(segment);
        RpcAddSegment(segment);
    }

    [ClientRpc]
    void RpcAddSegment(GameObject segment)
    {
        bodySegments.Add(segment.transform);
    }

    private void OnTriggerEnter(Collider other)
    {
        if (!isLocalPlayer) return;

        if (other.CompareTag("Food"))
        {
            CmdEatFood(other.gameObject);
        }
    }

    [Command]
    void CmdEatFood(GameObject food)
    {
        SnakeFood foodScript = food.GetComponent<SnakeFood>();
        if (foodScript != null)
        {
            foodScript.Respawn();
            CmdAddSegment();
        }
    }
}



using UnityEngine;
using Mirror;

public class SnakeFood : NetworkBehaviour
{
    public Vector2 spawnAreaMin = new Vector2(-10, -10);
    public Vector2 spawnAreaMax = new Vector2(10, 10);

    public void Start()
    {
        if (isServer)
        {
            Respawn();
        }
    }

    [Server]
    public void Respawn()
    {
        Vector3 newPos = new Vector3(
            Random.Range(spawnAreaMin.x, spawnAreaMax.x),
            0.5f,
            Random.Range(spawnAreaMax.y, spawnAreaMin.y)
        );

        transform.position = newPos;
    }
}
