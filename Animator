import requests
import customtkinter as ctk
from PIL import Image, ImageTk
import io
import threading
import datetime
import os

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
ctk.set_appearance_mode("light")
ctk.set_default_color_theme("green")

# –ê—Ä—Ç–∏–∫—É–ª—ã —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ Wildberries –∏ URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
DOSHIRAK_FLAVORS = {
    "–ì–æ–≤—è–¥–∏–Ω–∞": {
        "nm_id": 177954381,
        "image_url": "https://images.wbstatic.net/c516x688/new/28200000/28200246-1.jpg"
    },
    "–ö—É—Ä–∏—Ü–∞": {
        "nm_id": 177960855,
        "image_url": "https://images.wbstatic.net/c516x688/new/28200000/28200247-1.jpg"
    },
    "–°–≤–∏–Ω–∏–Ω–∞": {
        "nm_id": 346722170,
        "image_url": "https://images.wbstatic.net/c516x688/new/28200000/28200248-1.jpg"
    },
    "–ö—Ä–µ–≤–µ—Ç–∫–∏": {
        "nm_id": 181186105,
        "image_url": "https://images.wbstatic.net/c516x688/new/28200000/28200249-1.jpg"
    },
    "–ì—Ä–∏–±—ã": {
        "nm_id": 428474171,
        "image_url": "https://images.wbstatic.net/c516x688/new/28200000/28200250-1.jpg"
    }
}

class DoshirakPriceApp(ctk.CTk):
    def __init__(self):
        super().__init__()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.title("üçú –î–æ—à–∏—Ä–∞–∫ –ú–æ–Ω–∏—Ç–æ—Ä")
        self.geometry("1000x700")
        self.resizable(False, False)
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –∫—ç—à–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        self.cache_dir = "doshirak_images"
        os.makedirs(self.cache_dir, exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.create_widgets()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ü–µ–Ω—ã –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        self.update_prices()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        self.load_images()

    def create_widgets(self):
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.header_frame = ctk.CTkFrame(self, fg_color="transparent")
        self.header_frame.pack(pady=(15, 5))
        
        self.title_label = ctk.CTkLabel(
            self.header_frame, 
            text="üçú –î–û–®–ò–†–ê–ö –ú–û–ù–ò–¢–û–†",
            font=("Arial", 28, "bold"),
            text_color="#D32F2F"
        )
        self.title_label.pack(side="left", padx=10)
        
        self.subtitle_label = ctk.CTkLabel(
            self.header_frame, 
            text="–°–ª–µ–¥–∏ –∑–∞ –ª—É—á—à–∏–º–∏ —Ü–µ–Ω–∞–º–∏!",
            font=("Arial", 16),
            text_color="#757575"
        )
        self.subtitle_label.pack(side="left", padx=10)
        
        # –§—Ä–µ–π–º –¥–ª—è –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        self.products_frame = ctk.CTkScrollableFrame(
            self, 
            width=900, 
            height=500,
            fg_color="#FFFDE7",
            corner_radius=15
        )
        self.products_frame.pack(pady=10, padx=20, fill="both", expand=True)
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∫—É—Å–∞
        self.product_cards = {}
        for flavor, data in DOSHIRAK_FLAVORS.items():
            card = ctk.CTkFrame(
                self.products_frame, 
                corner_radius=12,
                fg_color="#FFFFFF",
                border_width=1,
                border_color="#E0E0E0"
            )
            card.pack(pady=12, fill="x", padx=10)
            
            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–ø–æ–∫–∞ –∑–∞–≥–ª—É—à–∫–∞)
            image_label = ctk.CTkLabel(card, text="", width=120, height=120)
            image_label.grid(row=0, column=0, rowspan=2, padx=15, pady=10)
            
            # –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∫—É—Å–∞
            name_label = ctk.CTkLabel(
                card, 
                text=flavor,
                font=("Arial", 20, "bold"),
                text_color="#5D4037",
                anchor="w"
            )
            name_label.grid(row=0, column=1, padx=(0,20), pady=(15,0), sticky="w")
            
            # –¶–µ–Ω–∞
            price_label = ctk.CTkLabel(
                card, 
                text="–ó–∞–≥—Ä—É–∑–∫–∞...",
                font=("Arial", 24, "bold"),
                text_color="#388E3C"
            )
            price_label.grid(row=1, column=1, padx=(0,20), pady=(0,15), sticky="w")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫–∏
            self.product_cards[flavor] = {
                "frame": card,
                "price_label": price_label,
                "image_label": image_label
            }
        
        # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        self.control_frame = ctk.CTkFrame(self, fg_color="transparent")
        self.control_frame.pack(pady=(5, 15))
        
        # –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        self.refresh_btn = ctk.CTkButton(
            self.control_frame,
            text="üîÑ –û–ë–ù–û–í–ò–¢–¨ –¶–ï–ù–´",
            command=self.update_prices,
            font=("Arial", 16),
            fg_color="#43A047",
            hover_color="#2E7D32",
            height=40,
            width=200,
            corner_radius=10
        )
        self.refresh_btn.pack(side="left", padx=10)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_bar = ctk.CTkLabel(
            self.control_frame, 
            text="–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...",
            font=("Arial", 12),
            text_color="#757575"
        )
        self.status_bar.pack(side="left", padx=10)

    def load_images(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–∫—É—Å–∞"""
        for flavor, data in DOSHIRAK_FLAVORS.items():
            threading.Thread(target=self._load_image, args=(flavor, data["image_url"]), daemon=True).start()

    def _load_image(self, flavor, url):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
            cache_path = os.path.join(self.cache_dir, f"{flavor}.jpg")
            
            if os.path.exists(cache_path):
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                image = Image.open(cache_path)
            else:
                # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                response = requests.get(url)
                image_data = response.content
                image = Image.open(io.BytesIO(image_data))
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à
                image.save(cache_path)
            
            # –ò–∑–º–µ–Ω—è–µ–º —Ä–∞–∑–º–µ—Ä –∏ –¥–µ–ª–∞–µ–º –∫—Ä—É–≥–ª—ã–µ —É–≥–ª—ã
            image = image.resize((120, 120), Image.LANCZOS)
            image = self._round_corners(image, radius=15)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è CTk
            ctk_image = ctk.CTkImage(
                light_image=image,
                size=(120, 120)
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º UI
            self.after(0, self._update_image, flavor, ctk_image)
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

    def _round_corners(self, image, radius=20):
        """–°–æ–∑–¥–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –∫—Ä—É–≥–ª—ã–º–∏ —É–≥–ª–∞–º–∏"""
        mask = Image.new('L', (120, 120), 0)
        mask_draw = Image.new('L', (120, 120), 0)
        draw = Image.new('L', (120, 120), 0)
        draw = ImageDraw.Draw(draw)
        draw.rounded_rectangle((0, 0, 120, 120), radius=radius, fill=255)
        mask = ImageChops.lighter(mask, draw)
        
        result = image.copy()
        result.putalpha(mask)
        return result

    def _update_image(self, flavor, ctk_image):
        """–û–±–Ω–æ–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ UI"""
        if flavor in self.product_cards:
            self.product_cards[flavor]["image_label"].configure(image=ctk_image)

    def get_price(self, nm_id):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É —Ç–æ–≤–∞—Ä–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É Wildberries"""
        api_url = f"https://card.wb.ru/cards/detail?nm={nm_id}"
        try:
            response = requests.get(api_url)
            response.raise_for_status()
            data = response.json()
            
            if data["data"]["products"]:
                price = data["data"]["products"][0]["salePriceU"] / 100
                return price
            return None
        except:
            return None

    def update_prices(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ü–µ–Ω—ã –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"""
        self.refresh_btn.configure(state="disabled", text="‚è≥ –û–ë–ù–û–í–õ–ï–ù–ò–ï...")
        self.status_bar.configure(text="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        threading.Thread(target=self._fetch_prices, daemon=True).start()

    def _fetch_prices(self):
        """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—ã –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        prices = {}
        for flavor, data in DOSHIRAK_FLAVORS.items():
            price = self.get_price(data["nm_id"])
            prices[flavor] = price
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.after(0, self._update_ui, prices)

    def _update_ui(self, prices):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å –Ω–æ–≤—ã–º–∏ —Ü–µ–Ω–∞–º–∏"""
        for flavor, price in prices.items():
            card = self.product_cards[flavor]
            if price is not None:
                card["price_label"].configure(text=f"{price:.2f} ‚ÇΩ")
                # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤—ã–≥–æ–¥–Ω—ã—Ö —Ü–µ–Ω
                if price < 60:
                    card["price_label"].configure(text_color="#D32F2F")
                    card["frame"].configure(border_color="#FFCDD2")
                else:
                    card["price_label"].configure(text_color="#388E3C")
                    card["frame"].configure(border_color="#C8E6C9")
            else:
                card["price_label"].configure(text="–û—à–∏–±–∫–∞", text_color="#757575")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –±–∞—Ä
        now = datetime.datetime.now().strftime("%d.%m.%Y %H:%M:%S")
        self.status_bar.configure(text=f"–¶–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {now}")
        self.refresh_btn.configure(state="normal", text="üîÑ –û–ë–ù–û–í–ò–¢–¨ –¶–ï–ù–´")

if __name__ == "__main__":
    app = DoshirakPriceApp()
    app.mainloop()
